<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on r4gus</title><link>https://r4gus.github.io/posts/</link><description>Recent content in Posts on r4gus</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>David P. Sugar</copyright><lastBuildDate>Mon, 22 Jan 2024 23:45:00 +0100</lastBuildDate><atom:link href="https://r4gus.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>HTTP/2 Reverse Proxy using Apache</title><link>https://r4gus.github.io/posts/proxy/</link><pubDate>Mon, 22 Jan 2024 23:45:00 +0100</pubDate><guid>https://r4gus.github.io/posts/proxy/</guid><description>This is a short tutorial on how to configure a reverse-proxy using apache, that translates http/1.1 requests into http/2 requests.
Imagine you have a server that only supports http/2 but a client that wants to connect to the server supports only http/1.1. In such a case it would be handy to have some kind of mechanism that translates between client and server. A reverse proxy. For this tutorial we are going to configure a Apache web-server on Ubuntu 22.</description></item><item><title>FIDO2: everything perfect?</title><link>https://r4gus.github.io/posts/whats-the-plan/</link><pubDate>Thu, 14 Dec 2023 17:27:36 +0100</pubDate><guid>https://r4gus.github.io/posts/whats-the-plan/</guid><description>Around a year ago, I found myself captivated by the FIDO2 authentication protocol, also known as PassKey. The promises made by the FIDO Alliance, a consortium featuring tech giants like Microsoft, Google, and Apple, were compelling - envisioning a future where passwords become obsolete, replaced by a faster, easier, and more secure authentication system across all devices (see Passkeys).
If you&amp;rsquo;ve been keeping an eye on cybersecurity news, you&amp;rsquo;re likely familiar with the significant incidents stemming from phishing attacks.</description></item><item><title>FIDO2 - Passwortlose Authentifizierung</title><link>https://r4gus.github.io/posts/fido-1/</link><pubDate>Mon, 12 Dec 2022 10:42:53 +0100</pubDate><guid>https://r4gus.github.io/posts/fido-1/</guid><description>Die fido Alliance möchte mit dem FIDO2 Standard nicht weniger, als die Art, wie wir uns in unserem digitalen Alltag authentifizieren, zu revolutionieren. Versprochen wird eine einfach zu handhabende Lösung, die Passwörter, auf lange Sicht, vollkommen ablöst und dabei deutlich sicherer ist als herkömmliche Authentifizierungslösungen. An den meisten Leuten, die nicht den neuesten Tech-Trends folgen, dürft FIDO2 jedoch bisher unbemerkt vorbeigezogen sein. Wenn überhaupt, ist der Begriff YubiKey bekannt, bei welchem es sich wohl um den geläufigsten FIDO2 Authenticator handelt.</description></item><item><title>SAM E51 Curiosity Nano programming with Zig #2 - UART</title><link>https://r4gus.github.io/posts/same51_2/</link><pubDate>Wed, 07 Sep 2022 23:01:22 +0200</pubDate><guid>https://r4gus.github.io/posts/same51_2/</guid><description>Last time we made the user LED of the Curiosity Nano board blink. In this post we&amp;rsquo;re going to add (blocking) UART support to MicroZig, so we can interact with the board over a serial terminal.
MicroZig defines a UART interface in src/core/uart.zig. To use it for our chip we must define a uart struct that specifies the supported DataBits (bits send between the start and stop bit), the number of StopBits and the Parity mode, as well as a Uart function.</description></item><item><title>SAM E51 Curiosity Nano programming with Zig #1</title><link>https://r4gus.github.io/posts/my-first-post/</link><pubDate>Tue, 09 Aug 2022 01:31:16 +0200</pubDate><guid>https://r4gus.github.io/posts/my-first-post/</guid><description>This series of posts is inspired by the Rust Discovery Book, a great learning resource on how to program microcontrollers using Rust. We&amp;rsquo;re going to program the SAM E51 Curiosity Nano using the Zig programming language, which is new and not quite production ready so be prepared to encounter some breaking changes.
Introduction Scope Eventually, the following topics will be covered:
How to write, build and flash an &amp;ldquo;embedded&amp;rdquo; (Zig) program using MicroZig, Regz and Microchip Studio (flashing).</description></item></channel></rss>